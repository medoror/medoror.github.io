<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Michael Edoror</title>
    <link>http://michaeledoror.com/</link>
    <description>Recent content on Michael Edoror</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Jan 2019 19:04:38 -0500</lastBuildDate>
    
	<atom:link href="http://michaeledoror.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Learning Blockchain Using Kotlin</title>
      <link>http://michaeledoror.com/post/learning-blockchain-using-kotlin/</link>
      <pubDate>Sun, 20 Jan 2019 19:04:38 -0500</pubDate>
      
      <guid>http://michaeledoror.com/post/learning-blockchain-using-kotlin/</guid>
      <description>To learn more about blockchain, I decided to port the following blockchain tutorial here. I definitely recommend this tutorial if you are completely unfamiliar with blockchain from a programmer perspective
This is my first go around with Kotlin from Java and Kotlin is definitely the real deal. Kotlin does an extremely good job of fixing the bad in java like handling null (with optionals) and simplifying code with autogenerated getter/setters, hashcode, equals, etc&amp;hellip; with certain classes.</description>
    </item>
    
    <item>
      <title>Learning Blockchain Using Kotlin</title>
      <link>http://michaeledoror.com/posts/learning-blockchain-using-kotlin/</link>
      <pubDate>Sun, 20 Jan 2019 19:04:38 -0500</pubDate>
      
      <guid>http://michaeledoror.com/posts/learning-blockchain-using-kotlin/</guid>
      <description>To learn more about blockchain, I decided to port the following blockchain tutorial here. I definitely recommend this tutorial if you are completely unfamiliar with blockchain from a programmer perspective
This is my first go around with Kotlin from Java and Kotlin is definitely the real deal. Kotlin does an extremely good job of fixing the bad in java like handling null (with optionals) and simplifying code with autogenerated getter/setters, hashcode, equals, etc&amp;hellip; with certain classes.</description>
    </item>
    
    <item>
      <title>Useful Unix Commands</title>
      <link>http://michaeledoror.com/post/useful-unix-commands/</link>
      <pubDate>Sun, 20 Jan 2019 19:03:33 -0500</pubDate>
      
      <guid>http://michaeledoror.com/post/useful-unix-commands/</guid>
      <description>Miscellaneous post. Using Unix from time to time for administrative tasks. Below is a running log of useful Linux commands that I always forget
Search for keywords in a file
 find . -type f -name &amp;ldquo;file&amp;rdquo; | xargs grep &amp;ldquo;keyword&amp;rdquo; 
Find largest files over 100M in filesystem
 find / -xdev -type f -size +100M -exec ls -la {} \; | sort -nk 5</description>
    </item>
    
    <item>
      <title>Useful Unix Commands</title>
      <link>http://michaeledoror.com/posts/useful-unix-commands/</link>
      <pubDate>Sun, 20 Jan 2019 19:03:33 -0500</pubDate>
      
      <guid>http://michaeledoror.com/posts/useful-unix-commands/</guid>
      <description>Miscellaneous post. Using Unix from time to time for administrative tasks. Below is a running log of useful Linux commands that I always forget
Search for keywords in a file
 find . -type f -name &amp;ldquo;file&amp;rdquo; | xargs grep &amp;ldquo;keyword&amp;rdquo; 
Find largest files over 100M in filesystem
 find / -xdev -type f -size +100M -exec ls -la {} \; | sort -nk 5</description>
    </item>
    
    <item>
      <title>Sharing Folders Virtual Box Ubuntu</title>
      <link>http://michaeledoror.com/post/sharing-folders-virtual-box-ubuntu/</link>
      <pubDate>Sun, 20 Jan 2019 19:02:18 -0500</pubDate>
      
      <guid>http://michaeledoror.com/post/sharing-folders-virtual-box-ubuntu/</guid>
      <description>This was entirely more complicated than I thought. Sharing these notes to maybe help someone in the future
This will probably work a few versions of windows and ubuntu but these steps were defined with a Windows 7 host machine and an Ubuntu 17.04 Virtual Machine on Virtual Box 5.1.26. Before sharing folders, you must install Guest Additions. For instructions on how to do this, see Guest Additions.
1) Create a folder on the host windows machine.</description>
    </item>
    
    <item>
      <title>Sharing Folders Virtual Box Ubuntu</title>
      <link>http://michaeledoror.com/posts/sharing-folders-virtual-box-ubuntu/</link>
      <pubDate>Sun, 20 Jan 2019 19:02:18 -0500</pubDate>
      
      <guid>http://michaeledoror.com/posts/sharing-folders-virtual-box-ubuntu/</guid>
      <description>This was entirely more complicated than I thought. Sharing these notes to maybe help someone in the future
This will probably work a few versions of windows and ubuntu but these steps were defined with a Windows 7 host machine and an Ubuntu 17.04 Virtual Machine on Virtual Box 5.1.26. Before sharing folders, you must install Guest Additions. For instructions on how to do this, see Guest Additions.
1) Create a folder on the host windows machine.</description>
    </item>
    
    <item>
      <title>Sample Git Configuration</title>
      <link>http://michaeledoror.com/post/sample-git-configuration/</link>
      <pubDate>Sun, 20 Jan 2019 18:49:50 -0500</pubDate>
      
      <guid>http://michaeledoror.com/post/sample-git-configuration/</guid>
      <description>Git configurations can be pre-configured in this file to specify default editors, aliases, coloring and many other options. Below is a simple starter configuration  [user] name = Your Name email = yourEmail@domain.com [core] editor = vim whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol excludesfile = ~/.gitignore [alias] lol = log &amp;ndash;graph &amp;ndash;decorate &amp;ndash;pretty=oneline &amp;ndash;abbrev-commit lola = log &amp;ndash;graph &amp;ndash;decorate &amp;ndash;pretty=oneline &amp;ndash;abbrev-commit &amp;ndash;all [color] branch = auto diff = auto interactive = auto status = auto</description>
    </item>
    
    <item>
      <title>Sample Git Configuration</title>
      <link>http://michaeledoror.com/posts/sample-git-configuration/</link>
      <pubDate>Sun, 20 Jan 2019 18:49:50 -0500</pubDate>
      
      <guid>http://michaeledoror.com/posts/sample-git-configuration/</guid>
      <description>Git configurations can be pre-configured in this file to specify default editors, aliases, coloring and many other options. Below is a simple starter configuration  [user] name = Your Name email = yourEmail@domain.com [core] editor = vim whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol excludesfile = ~/.gitignore [alias] lol = log &amp;ndash;graph &amp;ndash;decorate &amp;ndash;pretty=oneline &amp;ndash;abbrev-commit lola = log &amp;ndash;graph &amp;ndash;decorate &amp;ndash;pretty=oneline &amp;ndash;abbrev-commit &amp;ndash;all [color] branch = auto diff = auto interactive = auto status = auto</description>
    </item>
    
    <item>
      <title>How to Choose Data Structures in Java</title>
      <link>http://michaeledoror.com/post/how-to-choose-data-structures-in-java/</link>
      <pubDate>Sun, 20 Jan 2019 18:43:21 -0500</pubDate>
      
      <guid>http://michaeledoror.com/post/how-to-choose-data-structures-in-java/</guid>
      <description>With the massive list of all data structures that Java provides out of the box, it can be hard to know which one to choose in certain situations. The flow chart below has helped me make these choices with questions about the data and how it is used.
&amp;nbsp;</description>
    </item>
    
    <item>
      <title>How to Choose Data Structures in Java</title>
      <link>http://michaeledoror.com/posts/how-to-choose-data-structures-in-java/</link>
      <pubDate>Sun, 20 Jan 2019 18:43:21 -0500</pubDate>
      
      <guid>http://michaeledoror.com/posts/how-to-choose-data-structures-in-java/</guid>
      <description>With the massive list of all data structures that Java provides out of the box, it can be hard to know which one to choose in certain situations. The flow chart below has helped me make these choices with questions about the data and how it is used.
&amp;nbsp;</description>
    </item>
    
    <item>
      <title>Java Collections and Maps</title>
      <link>http://michaeledoror.com/post/java-collections-and-maps/</link>
      <pubDate>Sun, 20 Jan 2019 18:42:35 -0500</pubDate>
      
      <guid>http://michaeledoror.com/post/java-collections-and-maps/</guid>
      <description>General steps for working with projects in GitHub  Use the graphical UI on Github and fork the repository. Clone the forked repo to local computer: git clone https://github.com/&amp;lt;user_name&amp;gt;/&amp;lt;repository&amp;gt;.git Create an upstream remote to your remote repository: cd &amp;lt;repository&amp;gt; git remote add upstream https://github.com/&amp;lt;remote-repository-path&amp;gt;.git Create a local branch for the current feature: git checkout -b &amp;lt;user_name&amp;gt;/&amp;lt;issue&amp;gt; Make commits to your local master branch: git commit -a Make sure you leave a detailed commit message Pull from upstream master using rebase and resolve conflicts: git pull &amp;ndash;rebase upstream &amp;lt;user_name&amp;gt;/&amp;lt;issue&amp;gt; Push to your fork&amp;rsquo;s feature branch: git push origin &amp;lt;user_name&amp;gt;/&amp;lt;issue&amp;gt; Create Pull request to the repositories master branch of the repository.</description>
    </item>
    
    <item>
      <title>Java Collections and Maps</title>
      <link>http://michaeledoror.com/posts/java-collections-and-maps/</link>
      <pubDate>Sun, 20 Jan 2019 18:42:35 -0500</pubDate>
      
      <guid>http://michaeledoror.com/posts/java-collections-and-maps/</guid>
      <description>General steps for working with projects in GitHub  Use the graphical UI on Github and fork the repository. Clone the forked repo to local computer: git clone https://github.com/&amp;lt;user_name&amp;gt;/&amp;lt;repository&amp;gt;.git Create an upstream remote to your remote repository: cd &amp;lt;repository&amp;gt; git remote add upstream https://github.com/&amp;lt;remote-repository-path&amp;gt;.git Create a local branch for the current feature: git checkout -b &amp;lt;user_name&amp;gt;/&amp;lt;issue&amp;gt; Make commits to your local master branch: git commit -a Make sure you leave a detailed commit message Pull from upstream master using rebase and resolve conflicts: git pull &amp;ndash;rebase upstream &amp;lt;user_name&amp;gt;/&amp;lt;issue&amp;gt; Push to your fork&amp;rsquo;s feature branch: git push origin &amp;lt;user_name&amp;gt;/&amp;lt;issue&amp;gt; Create Pull request to the repositories master branch of the repository.</description>
    </item>
    
    <item>
      <title>Git Workflow</title>
      <link>http://michaeledoror.com/post/git-workflow/</link>
      <pubDate>Sun, 20 Jan 2019 18:38:18 -0500</pubDate>
      
      <guid>http://michaeledoror.com/post/git-workflow/</guid>
      <description>General steps for working with projects in GitHub  Use the graphical UI on Github and fork the repository. Clone the forked repo to local computer: git clone https://github.com/&amp;lt;user_name&amp;gt;/&amp;lt;repository&amp;gt;.git Create an upstream remote to your remote repository: cd &amp;lt;repository&amp;gt; git remote add upstream https://github.com/&amp;lt;remote-repository-path&amp;gt;.git Create a local branch for the current feature: git checkout -b &amp;lt;user_name&amp;gt;/&amp;lt;issue&amp;gt; Make commits to your local master branch: git commit -a Make sure you leave a detailed commit message Pull from upstream master using rebase and resolve conflicts: git pull &amp;ndash;rebase upstream &amp;lt;user_name&amp;gt;/&amp;lt;issue&amp;gt; Push to your fork&amp;rsquo;s feature branch: git push origin &amp;lt;user_name&amp;gt;/&amp;lt;issue&amp;gt; Create Pull request to the repositories master branch of the repository.</description>
    </item>
    
    <item>
      <title>Git Workflow</title>
      <link>http://michaeledoror.com/posts/git-workflow/</link>
      <pubDate>Sun, 20 Jan 2019 18:38:18 -0500</pubDate>
      
      <guid>http://michaeledoror.com/posts/git-workflow/</guid>
      <description>General steps for working with projects in GitHub  Use the graphical UI on Github and fork the repository. Clone the forked repo to local computer: git clone https://github.com/&amp;lt;user_name&amp;gt;/&amp;lt;repository&amp;gt;.git Create an upstream remote to your remote repository: cd &amp;lt;repository&amp;gt; git remote add upstream https://github.com/&amp;lt;remote-repository-path&amp;gt;.git Create a local branch for the current feature: git checkout -b &amp;lt;user_name&amp;gt;/&amp;lt;issue&amp;gt; Make commits to your local master branch: git commit -a Make sure you leave a detailed commit message Pull from upstream master using rebase and resolve conflicts: git pull &amp;ndash;rebase upstream &amp;lt;user_name&amp;gt;/&amp;lt;issue&amp;gt; Push to your fork&amp;rsquo;s feature branch: git push origin &amp;lt;user_name&amp;gt;/&amp;lt;issue&amp;gt; Create Pull request to the repositories master branch of the repository.</description>
    </item>
    
    <item>
      <title>Git Cheat Sheet</title>
      <link>http://michaeledoror.com/post/git-cheat-sheet/</link>
      <pubDate>Sun, 20 Jan 2019 18:31:07 -0500</pubDate>
      
      <guid>http://michaeledoror.com/post/git-cheat-sheet/</guid>
      <description>Git is absolutely essential knowledge if you want to be a developer. If you don&amp;rsquo;t know get familiar. For more of my take on git workflow and configurations see my other post. Below is my personal cheat sheet and useful commands I have come across
&amp;nbsp;
&amp;nbsp; Useful Commands
Create a branch and switch to it with local changes
git checkout -b &amp;lt;branch-name&amp;gt; origin/&amp;lt;branch&amp;gt;
Push created feature branch to the remote</description>
    </item>
    
    <item>
      <title>Git Cheat Sheet</title>
      <link>http://michaeledoror.com/posts/git-cheat-sheet/</link>
      <pubDate>Sun, 20 Jan 2019 18:31:07 -0500</pubDate>
      
      <guid>http://michaeledoror.com/posts/git-cheat-sheet/</guid>
      <description>Git is absolutely essential knowledge if you want to be a developer. If you don&amp;rsquo;t know get familiar. For more of my take on git workflow and configurations see my other post. Below is my personal cheat sheet and useful commands I have come across
&amp;nbsp;
&amp;nbsp; Useful Commands
Create a branch and switch to it with local changes
git checkout -b &amp;lt;branch-name&amp;gt; origin/&amp;lt;branch&amp;gt;
Push created feature branch to the remote</description>
    </item>
    
    <item>
      <title>Should I Use Git</title>
      <link>http://michaeledoror.com/post/should-i-use-git/</link>
      <pubDate>Sun, 20 Jan 2019 17:47:14 -0500</pubDate>
      
      <guid>http://michaeledoror.com/post/should-i-use-git/</guid>
      <description>Yes This isn&amp;rsquo;t even a question in this day and age&amp;hellip;. Git is used throughout the world as the main vehicle for version control bar none. For anyone that needs a source: https://rhodecode.com/insights/version-control-systems-2016
Git is a free and open source distributed version control system designed to handle everything from small to very large projects with efficiency. Once it is learned it very quick to use. Developers can seamlessly work locally and push changes to a remote for a collaborative workflow.</description>
    </item>
    
    <item>
      <title>Should I Use Git</title>
      <link>http://michaeledoror.com/posts/should-i-use-git/</link>
      <pubDate>Sun, 20 Jan 2019 17:47:14 -0500</pubDate>
      
      <guid>http://michaeledoror.com/posts/should-i-use-git/</guid>
      <description>Yes This isn&amp;rsquo;t even a question in this day and age&amp;hellip;. Git is used throughout the world as the main vehicle for version control bar none. For anyone that needs a source: https://rhodecode.com/insights/version-control-systems-2016
Git is a free and open source distributed version control system designed to handle everything from small to very large projects with efficiency. Once it is learned it very quick to use. Developers can seamlessly work locally and push changes to a remote for a collaborative workflow.</description>
    </item>
    
  </channel>
</rss>